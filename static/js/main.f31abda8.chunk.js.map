{"version":3,"sources":["App.js","index.js"],"names":["BladeContext","createContext","dataProvider","jsonServerProvider","Blade","useContext","blade","setBlade","open","Boolean","props","useSpring","config","duration","from","width","to","useEffect","console","log","div","style","className","title","onClick","body","ListActions","currentSort","resource","filters","displayedFilters","exporter","filterValues","permanentFilter","basePath","hasCreate","showFilter","selectedIds","onUnselectItems","maxResults","total","rest","TopToolbar","sanitizeListRestProps","cloneElement","context","CreateButton","ExportButton","disabled","sort","filter","Button","alert","label","PostList","List","actions","Datagrid","rowClick","id","record","args","item","trigerBlade","ReferenceField","source","reference","TextField","PostShow","Show","SimpleShowLayout","RichTextField","DateField","App","bladeContext","useState","Provider","value","Admin","Resource","name","show","list","renderDiv","document","querySelector","render"],"mappings":"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","file":"static/js/main.f31abda8.chunk.js","sourcesContent":["import React, {\r\n  cloneElement,\r\n  useState,\r\n  useContext,\r\n  createContext,\r\n  useEffect,\r\n} from \"react\";\r\nimport { Admin, Resource } from \"react-admin\";\r\nimport jsonServerProvider from \"ra-data-json-server\";\r\nimport IconEvent from \"@material-ui/icons/Event\";\r\nimport ShowBlade from \"./showBlade\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { animated, useSpring } from \"react-spring\";\r\nimport \"./app.css\";\r\nimport {\r\n  Show,\r\n  SimpleShowLayout,\r\n  TextField,\r\n  DateField,\r\n  EditButton,\r\n  ListGuesser,\r\n  RichTextField,\r\n  ReferenceField,\r\n  Datagrid,\r\n  TopToolbar,\r\n  CreateButton,\r\n  ExportButton,\r\n  Button,\r\n  sanitizeListRestProps,\r\n  List,\r\n} from \"react-admin\";\r\nconst BladeContext = createContext([{}, () => {}]);\r\n\r\nconst dataProvider = jsonServerProvider(\"https://jsonplaceholder.typicode.com\");\r\n\r\nconst Blade = () => {\r\n  const [blade, setBlade] = useContext(BladeContext);\r\n  const open = Boolean(blade);\r\n  const props = useSpring({\r\n    config: { duration: 120 },\r\n    from: {\r\n      width: open ? \"0%\" : \"80%\",\r\n    },\r\n    to: {\r\n      width: open ? \"80%\" : \"0%\",\r\n    },\r\n  });\r\n  useEffect(() => console.log(blade), [blade]);\r\n  return (\r\n    <animated.div style={props} className='blade-info'>\r\n      {open ? (\r\n        <>\r\n          <div className='blade-header'>\r\n            <h1>{blade.title}</h1>\r\n            <CloseIcon onClick={() => setBlade(null)} />\r\n          </div>\r\n          <div className='blade-body'>{blade.body}</div>\r\n        </>\r\n      ) : null}\r\n    </animated.div>\r\n  );\r\n};\r\nconst App = () => {\r\n  const bladeContext = useState(null);\r\n  return (\r\n    <BladeContext.Provider value={bladeContext}>\r\n      <Admin dataProvider={dataProvider}>\r\n        <Resource name='posts' show={PostShow} list={PostList} />\r\n      </Admin>\r\n      <Blade />\r\n    </BladeContext.Provider>\r\n  );\r\n};\r\n\r\nconst ListActions = ({\r\n  currentSort,\r\n  className,\r\n  resource,\r\n  filters,\r\n  displayedFilters,\r\n  exporter, // you can hide ExportButton if exporter = (null || false)\r\n  filterValues,\r\n  permanentFilter,\r\n  hasCreate, // you can hide CreateButton if hasCreate = false\r\n  basePath,\r\n  selectedIds,\r\n  onUnselectItems,\r\n  showFilter,\r\n  maxResults,\r\n  total,\r\n  ...rest\r\n}) => (\r\n  <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n    {filters &&\r\n      cloneElement(filters, {\r\n        resource,\r\n        showFilter,\r\n        displayedFilters,\r\n        filterValues,\r\n        context: \"button\",\r\n      })}\r\n    <CreateButton basePath={basePath} />\r\n    <ExportButton\r\n      disabled={total === 0}\r\n      resource={resource}\r\n      sort={currentSort}\r\n      filter={{ ...filterValues, ...permanentFilter }}\r\n      exporter={exporter}\r\n      maxResults={maxResults}\r\n    />\r\n    {/* Add your custom actions */}\r\n    <Button\r\n      onClick={() => {\r\n        alert(\"Your custom action\");\r\n      }}\r\n      label='Show calendar'>\r\n      <IconEvent />\r\n    </Button>\r\n  </TopToolbar>\r\n);\r\nexport const PostList = (props) => {\r\n  const [blade, setBlade] = useContext(BladeContext);\r\n  const trigerBlade = (...args) => {\r\n    const [, , item] = args;\r\n    setBlade(item);\r\n  };\r\n  return (\r\n    <List {...props} actions={<ListActions />}>\r\n      <Datagrid\r\n        rowClick={(id, basePath, record) => trigerBlade(id, basePath, record)}>\r\n        <ReferenceField source='userId' reference='users'>\r\n          <TextField source='id' />\r\n        </ReferenceField>\r\n        <TextField source='id' />\r\n        <TextField source='title' />\r\n        <TextField source='body' />\r\n      </Datagrid>\r\n    </List>\r\n  );\r\n};\r\nexport const PostShow = (props) => (\r\n  <Show {...props}>\r\n    <SimpleShowLayout>\r\n      <TextField source='title' />\r\n      <TextField source='teaser' />\r\n      <RichTextField source='body' />\r\n      <DateField label='Publication date' source='created_at' />\r\n    </SimpleShowLayout>\r\n  </Show>\r\n);\r\nexport default App;\r\n","import React from \"react\";\r\nimport App from \"./App\";\r\n\r\nimport { render } from \"react-dom\";\r\n\r\nconst renderDiv = document.querySelector(\"#root\");\r\nrender(<App />, renderDiv);\r\n"],"sourceRoot":""}